using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Input;
using System.Windows.Documents;

namespace HullDesign1
{
 
    public sealed class Edges
    {
       private static volatile Edges instance;
       private static object syncRoot = new Object();

       private TextWriter LOG;
       private Dictionary<string, List<Point3D>> m_point3DHullEdges = new Dictionary<string, List<Point3D>>();
       private Dictionary<string, Polyline> m_polylineHullEdges = new Dictionary<string, Polyline>();

       private Edges() 
       {
           const string logFile = "log_Edges.txt";
           LOG = new StreamWriter(logFile);

           initHullEdges();
       }

       public static Edges Instance
       {
          get 
          {
             if (instance == null) 
             {
                lock (syncRoot) 
                {
                   if (instance == null)
                       instance = new Edges();
                }
             }

             return instance;
          }
       }
       
       //--------------------------------------------------------------------------------
       bool initHullEdges()
       {
           m_point3DHullEdges.Clear();
           string line;
           List<Point3D> edge = null;
           string[] str;
           string wlName;
           string edgePoints;
           string[] strArray;
           Point3D node = new Point3D();

           const string file = "MaxSurfEdges_OUT_3D.txt";
           StreamReader r = new StreamReader(file);
           int ScaleX = 1;// 30;
           int ScaleY = 1; // -30;
           int ScaleZ = 1; // -30;
           int CoordYMove = 0;// 230;
           int CoordXMove = 0; // 100;
           int CoordZMove = 0;

           while ((line = r.ReadLine()) != null)
           {
               edge = new List<Point3D>();
               str = line.Split(':');
               wlName = str[0];
               edgePoints = str[1].Trim();
               edgePoints = edgePoints.Trim(';');
               edgePoints = edgePoints.TrimStart('0');
               edgePoints = edgePoints.TrimStart(',');
               edgePoints = edgePoints.TrimStart('0');
               edgePoints = edgePoints.TrimStart(',');
               edgePoints = edgePoints.TrimStart('0');
               edgePoints = edgePoints.TrimStart(';');
               strArray = edgePoints.Split(';');
               foreach (string point_3D in strArray)
               {
 
                   str = point_3D.Split(',');
                   node.X = (Convert.ToDouble(str[0]) * ScaleX) + CoordXMove;
                   node.Y = (Convert.ToDouble(str[1]) * ScaleY) + CoordYMove;
                   node.Z = (Convert.ToDouble(str[2]) * ScaleZ) + CoordZMove;
                   if ((node.X == 0) && (node.Y == 0) && (node.Z == 0))
                        { continue;}
                   edge.Add(node);
               }
               m_point3DHullEdges.Add(wlName, edge);
           }

           foreach (KeyValuePair<string, List<Point3D>> l_section in m_point3DHullEdges)
           {
               if (l_section.Value.First().Y < l_section.Value.Last().Y)
               {
                   l_section.Value.Reverse();
               }
           }

           createEdgesFromPoints();

           return true;
       }
       
       //--------------------------------------------------------------------------------

       bool createEdgesFromPoints()
       {
           Polyline l_polyLine;

           m_polylineHullEdges.Clear();
           foreach (KeyValuePair<string, List<Point3D>> l_edge in m_point3DHullEdges)
           {
               l_polyLine = new Polyline();
               foreach (Point3D node in l_edge.Value)
               {
                   l_polyLine.Points.Add(new Point(node.X, node.Z));
               }
               m_polylineHullEdges.Add(l_edge.Key, l_polyLine);
           }
           return true;
       }

       //--------------------------------------------------------------------------------

       public bool getPointHullEdges(ref Dictionary<string, List<Point3D>> hullSections)
       {
           hullSections = m_point3DHullEdges;
           return true;
       }



//----------------------------------------------------------------------------------------
    } 

}

